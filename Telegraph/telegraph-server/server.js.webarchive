bplist00Ñ_WebMainResourceÕ	
^WebResourceURL_WebResourceTextEncodingName_WebResourceData_WebResourceMIMEType_WebResourceFrameName_file:///index.htmlUutf-8O¬<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="2575.4">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  </style>
</head>
<body>
<p class="p1">const express = require("express");</p>
<p class="p1">const sqlite3 = require("sqlite3").verbose();</p>
<p class="p1">const bodyParser = require("body-parser");</p>
<p class="p1">const cors = require("cors");</p>
<p class="p2"><br></p>
<p class="p1">const app = express();</p>
<p class="p1">const PORT = 3000;</p>
<p class="p2"><br></p>
<p class="p1">// Middleware</p>
<p class="p1">app.use(cors());</p>
<p class="p1">app.use(bodyParser.json());</p>
<p class="p2"><br></p>
<p class="p1">// SQLite Database</p>
<p class="p1">const db = new sqlite3.Database("./products.db", (err) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>if (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>console.error("Error opening database:", err.message);</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>console.log("Connected to SQLite database.");</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>db.run(`</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>CREATE TABLE IF NOT EXISTS products (</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>id INTEGER PRIMARY KEY AUTOINCREMENT,</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>name TEXT NOT NULL,</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>price REAL NOT NULL,</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>qrCode TEXT,</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>imagePath TEXT</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>)</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>`);</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>}</p>
<p class="p1">});</p>
<p class="p2"><br></p>
<p class="p1">// âœ… Fetch all products (GET /products)</p>
<p class="p1">app.get("/products", (req, res) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>db.all("SELECT * FROM products", [], (err, rows) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>if (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>res.status(500).json({ error: err.message });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>return;</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>}</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>res.json(rows);</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>});</p>
<p class="p1">});</p>
<p class="p2"><br></p>
<p class="p1">// âœ… Add new product (POST /products)</p>
<p class="p1">app.post("/products", (req, res) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>const { name, price, qrCode, imagePath } = req.body;</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>if (!name || !price) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>return res.status(400).json({ error: "Name and Price are required!" });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>db.run(</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>`INSERT INTO products (name, price, qrCode, imagePath) VALUES (?, ?, ?, ?)`,</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>[name, price, qrCode, imagePath],</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>function (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>if (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>res.status(500).json({ error: err.message });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>return;</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>}</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>res.json({ id: this.lastID, name, price, qrCode, imagePath });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>}</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>);</p>
<p class="p1">});</p>
<p class="p2"><br></p>
<p class="p1">// âœ… Update product (PUT /products/:id)</p>
<p class="p1">app.put("/products/:id", (req, res) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>const { id } = req.params;</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>const { name, price, qrCode, imagePath } = req.body;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>db.run(</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>`UPDATE products SET name = ?, price = ?, qrCode = ?, imagePath = ? WHERE id = ?`,</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>[name, price, qrCode, imagePath, id],</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>function (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>if (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>res.status(500).json({ error: err.message });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  Â  Â  </span>return;</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>}</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>res.json({ message: "Product updated successfully" });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>}</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>);</p>
<p class="p1">});</p>
<p class="p2"><br></p>
<p class="p1">// âœ… Delete product (DELETE /products/:id)</p>
<p class="p1">app.delete("/products/:id", (req, res) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>const { id } = req.params;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>db.run(`DELETE FROM products WHERE id = ?`, [id], function (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>if (err) {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>res.status(500).json({ error: err.message });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  Â  Â  </span>return;</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>}</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  Â  Â  </span>res.json({ message: "Product deleted successfully" });</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>});</p>
<p class="p1">});</p>
<p class="p2"><br></p>
<p class="p1">// Start server</p>
<p class="p1">app.listen(PORT, () =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">Â  Â  </span>console.log(`ðŸš€ Server running at http://localhost:${PORT}`);</p>
<p class="p1">});</p>
</body>
</html>
Ytext/htmlP    ( 7 U g } ” © ¯_i                           j